org: angelt
service: api-artists

provider:
  name: aws
  runtime: python3.12  
  region: us-east-1
  stage: dev  # Definir el entorno como 'dev' para que los nombres de las tablas sean únicos
  memorySize: 128
  timeout: 30
  iam:
    role: arn:aws:iam::542697993719:role/LabRole
  environment:
    # Definir nombres únicos para las tablas usando el stage
    TABLE_NAME_ARTISTS: ${sls:stage}-Pt_artists 
    TABLE_NAME_TOKENS: ${sls:stage}-Pt_tokens_acceso_A  # Nombre único para la tabla de tokens
    SERVICE_NAME: ${self:service}
    STAGE: ${sls:stage}

functions:
  # Función para registrar un usuario
  registerArtist:
    handler: registerArtist.lambda_handler
    memorySize: 320
    events:
      - http:
          path: /artist/register
          method: post
          cors: true
          integration: lambda

  # Función para iniciar sesión
  loginArtist:
    handler: loginArtist.lambda_handler
    memorySize: 320
    events:
      - http:
          path: /artist/login
          method: post
          cors: true
          integration: lambda    

  # Función para validar token
  ValidateToken_A:
    handler: ValidateToken_A.lambda_handler
    memorySize: 520

  # Función para cambiar la contraseña
  changePassword:
    handler: changePassword.lambda_handler
    memorySize: 320
    events:
      - http:
          path: /artist/change-password
          method: patch
          cors: true
          integration: lambda
          request:
            template:
              application/json: |
                {
                  "method": "$context.httpMethod",
                  "path": "$context.path",
                  "headers": {
                    "Authorization": "$input.params('Authorization')"
                  },
                  "body": $input.body
                }

  # Función para obtener usuarios por país
  getartistByCountry:
    handler: getAllByCountry.lambda_handler
    memorySize: 320
    events:
      - http:
          path: /artist/getallbycountry
          method: post
          cors: true
          integration: lambda

  # Función para obtener usuario por artist_id
  getUserByTenantId:
    handler: getInfoById.lambda_handler
    memorySize: 320
    events:
      - http:
          path: /artist/getInfo
          method: post
          cors: true
          integration: lambda
          request:
            template:
              application/json: |
                {
                  "method": "$context.httpMethod",
                  "path": "$context.path",
                  "headers": {
                    "Authorization": "$input.params('Authorization')"
                  },
                  "body": $input.body
                }

 
  changeName:
    handler: changeName.lambda_handler
    memorySize: 320
    events:
      - http:
          path: /artist/change-name
          method: patch
          cors: true
          integration: lambda
          request:
            template:
              application/json: |
                {
                  "method": "$context.httpMethod",
                  "path": "$context.path",
                  "headers": {
                    "Authorization": "$input.params('Authorization')"
                  },
                  "body": $input.body
                }

  changeInfo:
    handler: changeInfo.lambda_handler
    memorySize: 320
    events:
      - http:
          path: /artist/changeInfo
          method: patch
          cors: true
          integration: lambda
          request:
            template:
              application/json: |
                {
                  "method": "$context.httpMethod",
                  "path": "$context.path",
                  "headers": {
                    "Authorization": "$input.params('Authorization')"
                  },
                  "body": $input.body
                }

  getAllbyName:
    handler: getAllbyName.lambda_handler
    memorySize: 320
    events:
      - http:
          path: /artist/getAllbyName
          method: post
          cors: true
          integration: lambda
          
    
  


resources:
  Resources:
    # Tabla DynamoDB para artistas (Pt_artist)
    DynamoDbTableArtist:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          - AttributeName: artist_id
            AttributeType: S
          - AttributeName: country
            AttributeType: S
          - AttributeName: name
            AttributeType: S
        KeySchema:
          - AttributeName: artist_id
            KeyType: HASH  # Clave de partición
        BillingMode: PAY_PER_REQUEST  # Alternativa para ProvisionedCapacity
        TableName: ${self:provider.environment.TABLE_NAME_ARTISTS}  # Nombre de la tabla de artistas

        # Habilitar la recuperación de punto en el tiempo (backup)
        PointInTimeRecoverySpecification:
          PointInTimeRecoveryEnabled: true

        # Definición de un índice secundario global para 'country'
        GlobalSecondaryIndexes:
          - IndexName: CountryIndex  # Nombre del índice
            KeySchema:
              - AttributeName: country
                KeyType: HASH  # 'country' como clave HASH en el índice
            Projection:
              ProjectionType: ALL  # Incluye todos los atributos en el índice

        # Índice para 'name' + 'artist_id'
          - IndexName: NameTenantIndex  # Nombre del nuevo índice
            KeySchema:
              - AttributeName: name
                KeyType: HASH  # 'name' como clave HASH en el índice
              - AttributeName: artist_id
                KeyType: RANGE  # 'artist_id' como clave de ordenación
            Projection:
              ProjectionType: ALL  # Incluye todos los atributos en el índice

    # Tabla DynamoDB para tokens (Pt_tokens_acceso)
    DynamoDbTableTokens:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          - AttributeName: artist_id
            AttributeType: S
          - AttributeName: token
            AttributeType: S
        KeySchema:
          - AttributeName: artist_id
            KeyType: HASH
          - AttributeName: token
            KeyType: RANGE  # Sort key para los tokens
        BillingMode: PAY_PER_REQUEST  # Uso de pago por demanda
        TableName: ${self:provider.environment.TABLE_NAME_TOKENS}

        # Habilitar la recuperación de punto en el tiempo (backup)
        PointInTimeRecoverySpecification:
          PointInTimeRecoveryEnabled: true

        
